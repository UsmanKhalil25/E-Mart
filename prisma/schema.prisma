generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String?
  phoneNumber String    @unique
  CNIC        String?    
  address     Address?
  sales       Sale[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id         Int       @id @default(autoincrement())
  district   String
  tehsil     String
  city       String
  detail     String
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int       @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Company {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  products Product[]
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  products Product[]
}

model Product {
  id              Int           @id @default(autoincrement())
  model           String
  price           Int
  stock           Int
  description     String?
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       Int
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  productSales    ProductSale[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PaymentStatus {
  COMPLETED
  PENDING
  FAILED
  REFUNDED
}

enum PaymentOption {
  FULL_PAYMENT
  INSTALLMENT
}

model Sale {
  id              Int              @id @default(autoincrement())
  date            DateTime
  customer        Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId      Int
  paymentStatus   PaymentStatus
  paymentOption   PaymentOption
  productSales    ProductSale[]
  fullPayment     FullPayment?
  installmentPlan InstallmentPlan?
  bookRecord      BookRecord?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProductSale {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId   Int
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId      Int
  quantity    Int
  price       Int
}

model FullPayment {
  id              Int   @id @default(autoincrement())
  sale            Sale  @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId          Int   @unique
  discount        Int?
  purchaseAmount  Int
}

model InstallmentPlan {
  id                Int            @id @default(autoincrement())
  sale              Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId            Int            @unique
  totalPrice        Int
  remainingPrice    Int
  downPayment       Int
  installmentPeriod Int
  installments      Installment[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Installment {
  id                Int              @id @default(autoincrement())
  installmentPlan   InstallmentPlan  @relation(fields: [installmentPlanId], references: [id],onDelete: Cascade)
  installmentPlanId Int
  expectedPayment   Int
  actualPayment     Int?
  dueDate           DateTime
  paidAt            DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model BookRecord {
  id          Int      @id @default(autoincrement())
  sale        Sale     @relation(fields: [saleId], references: [id],onDelete: Cascade)
  saleId      Int      @unique
  bookName    String
  pageNumber  Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
